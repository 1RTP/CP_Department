@using FastReport.Utils
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FastReport.Web for ASP.NET Core demo application .NET 8</title>
    <link href="~/css/site.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link rel="shortcut icon" type="image/x-icon" href="~/favicon.ico" />
</head>
<body>
    <div class="content-block">
        <div class="sidebar">
            @await Html.PartialAsync("_NavMenu")
        </div>

        <div class="main">
            <div class="content px-4" style="line-height: normal;">
                <div id="reportContainer">
                    @RenderBody()
                </div>
            </div>
            <div class="blazor-version">FastReport.Web v. @Config.Version</div>
        </div>
    </div>

    <script>
        async function loadReport(reportName) {
            try {
                const response = await fetch(`LoadReport?reportName=${encodeURIComponent(reportName)}`);
                if (!response.ok) {
                    throw new Error(`Failed to load report: ${response.statusText}`);
                }
                const data = await response.text();
                const reportContainer = document.getElementById('reportContainer');
                reportContainer.innerHTML = data;
                executeScripts(reportContainer);
            } catch (error) {
                alert(error.message);
            }
        }

        function executeScripts(container) {
            const scripts = container.querySelectorAll('script');
            scripts.forEach(script => {
                const newScript = document.createElement('script');
                newScript.text = script.textContent;
                document.head.appendChild(newScript).parentNode.removeChild(newScript);
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            const reportLinks = document.querySelectorAll('.report-item a');
            reportLinks.forEach(link => {
                link.addEventListener('click', event => {
                    event.preventDefault();
                    const reportName = link.getAttribute('href').substring(0);

                    reportLinks.forEach(link => link.classList.remove('active'));
                    link.classList.add('active');

                    loadReport(reportName);
                });
            });
        });
    </script>
</body>
</html>
